import requests
import time
import random
import re
import os

# ---------- PASSWORD PROTECTION ----------
PASSWORD = "aryan123"

def check_password():
    user_pass = input("🔒 Enter Script Password: ")
    if user_pass != PASSWORD:
        print("❌ Wrong password! Access denied.")
        exit()

# ---------- LOGO ----------
logo = """
█████╗ ██████╗ ██╗   ██╗ █████╗ ███╗   ██╗
██╔══██╗██╔══██╗██║   ██║██╔══██╗████╗  ██║
███████║██████╔╝██║   ██║███████║██╔██╗ ██║
██╔══██║██╔═══╝ ██║   ██║██╔══██║██║╚██╗██║
██║  ██║██║     ╚██████╔╝██║  ██║██║ ╚████║
╚═╝  ╚═╝╚═╝      ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═══╝
🔥 Facebook Auto Comment Tool by Aryan 🔥
"""

# ---------- GET TOKEN FROM COOKIE ----------
def get_token_from_cookie(cookie_str):
    headers = {
        "User-Agent": "Mozilla/5.0",
        "Content-Type": "application/x-www-form-urlencoded",
        "Cookie": cookie_str
    }
    try:
        res = requests.get("https://business.facebook.com/business_locations", headers=headers)
        token = re.search(r'"EAAG\w+', res.text)
        if token:
            return token.group(0)
        else:
            print("❌ Token not found from cookie.")
            return None
    except Exception as e:
        print("❌ Cookie token error:", e)
        return None

# ---------- LOAD POSTS FROM WALL (RESUME WALL ENABLED) ----------
def get_post_ids_from_wall(token, limit=10):
    try:
        url = f"https://graph.facebook.com/me/feed?limit={limit}&access_token={token}"
        res = requests.get(url).json()
        post_ids = []
        if "data" in res:
            for post in res["data"]:
                post_ids.append(post["id"])
            return post_ids
        else:
            print("⚠️ Token error / No posts. Skipping...")
            return []
    except Exception as e:
        print("⚠️ Error loading wall:", e)
        return []

# ---------- GET PAGES ----------
def get_page_list(token):
    url = f"https://graph.facebook.com/me/accounts?access_token={token}"
    try:
        res = requests.get(url).json()
        pages = {}
        if "data" in res:
            for page in res['data']:
                pages[page['name']] = {
                    'id': page['id'],
                    'token': page['access_token']
                }
        return pages
    except Exception as e:
        print("⚠️ Page list error:", e)
        return {}

# ---------- COMMENT FUNCTION ----------
def comment_post(token, post_id, message):
    url = f"https://graph.facebook.com/{post_id}/comments"
    data = {
        'message': message,
        'access_token': token
    }
    try:
        res = requests.post(url, data=data).json()
        return res
    except Exception as e:
        return {"error": str(e)}

# ---------- LOAD TOKENS ----------
def load_tokens(path):
    if not os.path.exists(path):
        print("❌ Token file not found.")
        return []
    with open(path, 'r') as f:
        return [line.strip() for line in f if line.strip()]

# ---------- MAIN FUNCTION ----------
def main():
    check_password()
    print(logo)

    mode = input("🔰 Mode [single/multi]: ").lower()
    login_type = input("🔑 Login using [token/cookie]: ").lower()

    tokens = []

    if login_type == "cookie":
        cookie = input("🍪 Enter Facebook Cookie: ")
        token = get_token_from_cookie(cookie)
        if not token:
            print("❌ Invalid cookie. Exiting.")
            return
        tokens = [token]
    else:
        if mode == "multi":
            path = input("📂 Enter token file path: ")
            tokens = load_tokens(path)
        else:
            token = input("🔐 Enter Facebook Token: ")
            tokens = [token]

    if not tokens:
        print("❌ No tokens loaded.")
        return

    use_pages = input("📣 Use pages for commenting? (y/n): ").lower() == 'y'
    if use_pages:
        page_tokens = []
        for t in tokens:
            pages = get_page_list(t)
            for name, info in pages.items():
                print(f"📘 Page Loaded: {name}")
                page_tokens.append(info['token'])
        tokens = page_tokens

    post_mode = input("📌 Post mode? [wall/manual]: ").lower()
    post_ids = []
    if post_mode == 'wall':
        limit = int(input("🔢 Number of posts per ID to load: "))
        for t in tokens:
            ids = get_post_ids_from_wall(t, limit)
            post_ids.extend(ids)
    else:
        post_ids = input("📝 Enter post IDs (comma-separated): ").split(',')

    hatters = input("🚫 Hatter post IDs (comma-separated, optional): ").strip().split(',') if input("🚫 Add hatter list? (y/n): ").lower() == 'y' else []

    comment_file = input("🗂️ Comment file path (leave empty for manual input): ").strip()
    if comment_file and os.path.exists(comment_file):
        with open(comment_file, 'r') as f:
            comments = [line.strip() for line in f if line.strip()]
    else:
        comments = [input("💬 Enter comment: ")]

    delay = int(input("⏱️ Delay between comments (in seconds): "))
    print("\n🚀 Starting auto-comment...\n")

    for token in tokens:
        for post_id in post_ids:
            post_id = post_id.strip()
            if post_id in hatters:
                print(f"⛔ Skipped Hatter Post {post_id}")
                continue

            comment = random.choice(comments)
            res = comment_post(token, post_id, comment)

            if "id" in res:
                print(f"✅ Commented on {post_id} → ID: {res['id']}")
            else:
                err = res.get('error', 'Unknown')
                print(f"❌ Failed on {post_id} → {err}")
            time.sleep(delay)

# ---------- RUN ----------
if __name__ == "__main__":
    main()
