import requests
import time
import os
from datetime import datetime

# Logo and start time
def print_logo():
    os.system('cls' if os.name == 'nt' else 'clear')
    print("\033[91m" + r"""
███████╗██████╗ ██╗   ██╗ █████╗ ███╗   ██╗
██╔════╝██╔══██╗╚██╗ ██╔╝██╔══██╗████╗  ██║
█████╗  ██████╔╝ ╚████╔╝ ███████║██╔██╗ ██║
██╔══╝  ██╔═══╝   ╚██╔╝  ██╔══██║██║╚██╗██║
███████╗██║        ██║   ██║  ██║██║ ╚████║
╚══════╝╚═╝        ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝
          SARFU RULLEX TOOL - ArYan
""" + "\033[0m")
    print("🕒 Tool Start Time:", datetime.now().strftime('%Y-%m-%d %I:%M:%S %p'), "\n")

# Password check
def password_protect():
    correct = "Aryan123"
    user_input = input("🔐 Enter Tool Password: ")
    if user_input != correct:
        print("❌ Wrong password. Exiting.")
        exit()

# Get token from cookie (you need to implement your own method here)
def convert_cookie_to_token(cookie):
    # Example placeholder
    return {'token': f"TOKEN_FROM_{cookie}", 'name': f"CookieUser_{cookie[:5]}", 'id': cookie[:8]}

# Send message
def send_message(token, recipient_id, message, is_group=False):
    try:
        if is_group:
            # Simulate group message API call
            print(f"📨 Message sent to Group {recipient_id} from {token['name']}")
        else:
            # Simulate inbox message API call
            print(f"📨 Message sent to Inbox {recipient_id} from {token['name']}")
    except Exception as e:
        print(f"❌ Error sending message: {e}")
        time.sleep(5)
        send_message(token, recipient_id, message, is_group)

# Load tokens
def load_tokens(mode, login_type):
    tokens = []
    if login_type == "cookie":
        if mode == "multi":
            path = input("📂 Enter cookie file path: ")
            with open(path, 'r') as f:
                cookies = [x.strip() for x in f.readlines()]
            for ck in cookies:
                token = convert_cookie_to_token(ck)
                tokens.append(token)
            print(f"✅ {len(tokens)} Cookies converted to tokens.")
        else:
            cookie = input("🍪 Enter cookie: ")
            token = convert_cookie_to_token(cookie)
            tokens.append(token)
            print("✅ Cookie converted to token.")
    elif login_type == "token":
        if mode == "multi":
            path = input("📂 Enter token file path: ")
            with open(path, 'r') as f:
                for tk in f.readlines():
                    token = tk.strip()
                    tokens.append({'token': token, 'name': f"User_{token[:5]}", 'id': token[:8]})
            print(f"✅ {len(tokens)} tokens loaded.")
        else:
            token = input("🔑 Enter token: ")
            tokens.append({'token': token, 'name': f"User_{token[:5]}", 'id': token[:8]})
            print("✅ Token added.")
    return tokens

# Load message(s)
def load_messages():
    method = input("💬 Message type (single/file): ").strip().lower()
    if method == "single":
        msg = input("✉️ Enter your message: ")
        return [msg]
    else:
        path = input("📂 Enter message file path: ")
        with open(path, 'r') as f:
            return [x.strip() for x in f.readlines()]

# Load recipients
def load_recipients(is_group):
    count = int(input("🔢 How many IDs to send messages to? "))
    ids = []
    for i in range(count):
        rid = input(f"🔗 Enter {'Group' if is_group else 'User'} ID {i+1}: ")
        ids.append(rid)
    return ids

# Load backup tokens
def load_backups():
    path = input("📂 Enter backup token file path (or leave blank): ")
    tokens = []
    if path:
        with open(path, 'r') as f:
            for tk in f.readlines():
                token = tk.strip()
                tokens.append({'token': token, 'name': f"Backup_{token[:5]}", 'id': token[:8]})
        print(f"🛡️ Loaded {len(tokens)} backup tokens.")
    return tokens

# Main
def main():
    password_protect()
    print_logo()

    mode = input("🔄 Mode (single/multi): ").lower()
    login_type = input("🔑 Login type (token/cookie): ").lower()

    tokens = load_tokens(mode, login_type)
    backups = load_backups()

    target_type = input("📤 Send to (inbox/group): ").lower()
    is_group = target_type == "group"

    recipient_ids = load_recipients(is_group)
    messages = load_messages()
    delay = int(input("⏱️ Delay (seconds): "))

    print("\n🚀 Starting message sender tool...\n")

    while True:
        for recipient in recipient_ids:
            for msg in messages:
                for user in tokens:
                    send_message(user, recipient, msg, is_group)
                    time.sleep(delay)
                for bkp in backups:
                    send_message(bkp, recipient, msg, is_group)
                    time.sleep(delay)

        again = input("🔁 Repeat messages? (yes/no): ").strip().lower()
        if again != 'yes':
            print("✅ Exiting tool. Done.")
            break

if __name__ == "__main__":
    main()
