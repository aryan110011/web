import time
import json
import requests
from datetime import datetime

# Password Protection
def password_protection():
    password = "your_secure_password"  # Replace with your secure password
    entered_password = input("🔒 Enter password to access the tool: ")
    if entered_password != password:
        print("❌ Incorrect password. Exiting...")
        exit()

# Logo with red color
def print_logo():
    start_time = datetime.now().strftime("%d-%m-%Y %I:%M:%S %p")
    print("\n\n")  # To make space before logo
    print("\033[91m" + r""" 
   ███████╗██████╗ ██╗     ██╗███╗   ██╗██╗     ██╗     ███████╗
   ██╔════╝██╔══██╗██║     ██║████╗  ██║██║     ██║     ██╔════╝
   █████╗  ██████╔╝██║     ██║██╔██╗ ██║██║     ██║     █████╗  
   ██╔══╝  ██╔══██╗██║     ██║██║╚██╗██║██║     ██║     ██╔══╝  
   ███████╗██║  ██║██████╗ ██║██║ ╚████║██████╗ ██║     ███████╗
   ╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝  ╚═══╝╚═════╝ ╚═╝     ╚══════╝
                                                                 
   """ + "\033[0m")  # Reset color back to normal
    print(f"🕒 Tool Started At: {start_time}\n")

# Function to comment on a post using the token
def comment_on_post(token, post_id, comment):
    try:
        # Placeholder for actual Facebook API request
        print(f"📌 Comment sent from Token {token['name']} (ID: {token['id']}) to Post ID {post_id}: {comment}")
    except requests.exceptions.RequestException as e:
        print(f"❌ Network issue: {e}. Retrying...")
        time.sleep(5)  # Wait for 5 seconds before retrying
        comment_on_post(token, post_id, comment)  # Retry the operation

# Function to comment on a page using the token
def comment_on_page(token, page_id, comment):
    try:
        # Placeholder for actual Facebook API request
        print(f"📌 Comment sent from Token {token['name']} (ID: {token['id']}) to Page ID {page_id}: {comment}")
    except requests.exceptions.RequestException as e:
        print(f"❌ Network issue: {e}. Retrying...")
        time.sleep(5)  # Wait for 5 seconds before retrying
        comment_on_page(token, page_id, comment)  # Retry the operation

# Function to perform commenting on both posts and pages
def comment_on_post_or_page(tokens, post_id_or_page_id, comment, delay, is_page=False):
    for token in tokens:
        if is_page:
            comment_on_page(token, post_id_or_page_id, comment)
            print(f"🌟 Comment sent from Token {token['name']} (ID: {token['id']}) to Page: {post_id_or_page_id}")
        else:
            comment_on_post(token, post_id_or_page_id, comment)
            print(f"🌟 Comment sent from Token {token['name']} (ID: {token['id']}) to Post ID: {post_id_or_page_id}")
        time.sleep(delay)

# Function to get token from cookie (example)
def get_token_from_cookie(cookie):
    # Replace with the actual logic for converting cookie to token
    return {'name': f"Cookie #{cookie}", 'id': cookie}

# Function to read comments from a file
def load_comments_from_file(file_path):
    with open(file_path, 'r') as file:
        comments = file.readlines()
    return [comment.strip() for comment in comments]

# Function to load multiple post IDs
def load_post_ids():
    post_count = int(input("🔢 How many posts would you like to comment on? "))
    post_ids = []
    for i in range(post_count):
        post_id = input(f"🔗 Enter Post ID {i+1}: ")
        post_ids.append(post_id)
    return post_ids

# Backup IDs
def get_backup_tokens(backup_ids_file):
    with open(backup_ids_file, 'r') as f:
        backup_tokens = f.readlines()
    return [token.strip() for token in backup_tokens]

# Main function to run the script
def main():
    password_protection()  # Enforce password protection

    print_logo()  # Display logo

    # Prompt user for mode (single/multi) and login type (token/cookie)
    mode = input("🔄 Choose mode (single/multi): ").lower()
    login_type = input("🔑 Login using (token/cookie): ").lower()

    # Load tokens based on mode
    tokens = []
    if login_type == "cookie":
        if mode == "multi":
            file_path = input("📂 Cookie file path: ")
            tokens = load_tokens_from_cookies(file_path)
        else:
            cookie = input("🍪 Enter single cookie: ")
            token = get_token_from_cookie(cookie)
            tokens.append(token)
            print(f"✅ Cookie converted to token: {token}")
    elif login_type == "token":
        token = input("🔑 Enter token: ")
        # Get the user's name from the token (For example purposes)
        tokens.append({'name': 'User_Name', 'id': token})
        print(f"✅ Token added: {token}")

    # Ask user for backup IDs file if available
    backup_file = input("📂 Enter backup IDs file path (leave blank if not used): ")
    backup_tokens = []
    if backup_file:
        backup_tokens = get_backup_tokens(backup_file)
        print(f"🔑 Backup tokens loaded: {len(backup_tokens)}")

    # Ask user if they want to comment on a page or post
    is_page = input("💡 Comment on Page (yes/no)? ").lower() == "yes"

    # Get post ID or page ID
    post_ids = load_post_ids()

    # Ask for the comment method (single comment or file)
    comment_method = input("💬 Choose comment method (single/file): ").lower()

    if comment_method == "single":
        comment = input("💬 Enter your single comment: ")
    elif comment_method == "file":
        file_path = input("📂 Enter comment file path: ")
        comments = load_comments_from_file(file_path)
    else:
        print("❌ Invalid option. Exiting.")
        exit()

    # Ask for delay
    delay = int(input("⏳ Set delay between comments (seconds): "))

    # Continuous Commenting: Repeat commenting as long as the user wants
    while True:
        if comment_method == "single":
            for post_id in post_ids:
                comment_on_post_or_page(tokens, post_id, comment, delay, is_page)
                if backup_tokens:
                    # Optionally, use backup tokens
                    print("💥 Using backup tokens now...")
                    comment_on_post_or_page(backup_tokens, post_id, comment, delay, is_page)

        elif comment_method == "file":
            for post_id in post_ids:
                for comment in comments:
                    comment_on_post_or_page(tokens, post_id, comment, delay, is_page)
                    if backup_tokens:
                        # Optionally, use backup tokens
                        print("💥 Using backup tokens now...")
                        comment_on_post_or_page(backup_tokens, post_id, comment, delay, is_page)

        # Ask if the user wants to continue or stop
        user_input = input("💬 Do you want to continue commenting? (yes/no): ").lower()
        if user_input != "yes":
            print("🚀 Exiting tool...")
            break

    print("\n✅ Tool execution completed successfully!")

if __name__ == "__main__":
    main()
